{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"01-PyTorch-Basic.ipynb의 사본","provenance":[{"file_id":"1yJu_HUw98oEO-TUwhD0HuA374lxk0IEz","timestamp":1616548236424}],"collapsed_sections":[],"toc_visible":true},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","metadata":{"id":"J4er6OCm4gY6"},"source":["# PyTorch 101\n","\n","- PyTorch tutorial website 참고(https://tutorials.pytorch.kr/beginner/deep_learning_60min_blitz.html)\n","- PyTorch is multidimensional arrays, tensors and an extensive library of operations on them"]},{"cell_type":"code","metadata":{"id":"QXutfY7p4Raq","executionInfo":{"status":"ok","timestamp":1616548639383,"user_tz":-540,"elapsed":4112,"user":{"displayName":"stp L","photoUrl":"","userId":"16125751050798431485"}}},"source":["# torch가 설치되어 있지 않다면\n","# https://pytorch.org 에서 환경에 맞는 command로 설치하거나\n","# !pip install torch 또는 !pip3 install torch (Python3 환경임을 명시)\n","\n","import torch"],"execution_count":1,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"V4k-VyJH4zDo"},"source":["## 1. Tensor\n","\n","- PyTorch의 기본 단위이며 Numpy의 배열과 유사하다"]},{"cell_type":"markdown","metadata":{"id":"44UijOVf4_Hs"},"source":["### 텐서 만들기"]},{"cell_type":"code","metadata":{"id":"UA86Mdu54xQ-","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1616548639385,"user_tz":-540,"elapsed":4100,"user":{"displayName":"stp L","photoUrl":"","userId":"16125751050798431485"}},"outputId":"119e602a-85dd-41bc-a04a-e9e94f0dd050"},"source":["# Create a torch.Tensor object with the given data.  It is a 1D vector\n","V_data = [1., 2., 3.]\n","V = torch.Tensor(V_data)\n","print(V)\n","\n","# Creates a matrix\n","M_data = [[1., 2., 3.], [4., 5., 6]]\n","M = torch.Tensor(M_data)\n","print(M)\n","\n","# Create a 3D tensor of size 2x2x2.\n","T_data = [[[1.,2.], [3.,4.]],\n","          [[5.,6.], [7.,8.]]]\n","T = torch.Tensor(T_data)\n","print(T)"],"execution_count":2,"outputs":[{"output_type":"stream","text":["tensor([1., 2., 3.])\n","tensor([[1., 2., 3.],\n","        [4., 5., 6.]])\n","tensor([[[1., 2.],\n","         [3., 4.]],\n","\n","        [[5., 6.],\n","         [7., 8.]]])\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"56jWpi7R5EoN","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1616548639386,"user_tz":-540,"elapsed":4094,"user":{"displayName":"stp L","photoUrl":"","userId":"16125751050798431485"}},"outputId":"49f15734-620b-4d0d-b5ec-1d15e745845f"},"source":["# torch.ones: create a tensor filled with 1.0\n","a = torch.ones(3)\n","print(a)\n","\n","b = torch.ones(2, 3)\n","print(b)"],"execution_count":3,"outputs":[{"output_type":"stream","text":["tensor([1., 1., 1.])\n","tensor([[1., 1., 1.],\n","        [1., 1., 1.]])\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"QNgsgOGB5FRC","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1616548648558,"user_tz":-540,"elapsed":1059,"user":{"displayName":"stp L","photoUrl":"","userId":"16125751050798431485"}},"outputId":"200a316f-5817-426d-8447-2da2fd31d32e"},"source":["# torch.zeros: create a tensor filled with 0.0\n","c = torch.zeros(4)\n","print(c)\n","\n","d = torch.zeros(5, 2, 3)\n","print(d)"],"execution_count":4,"outputs":[{"output_type":"stream","text":["tensor([0., 0., 0., 0.])\n","tensor([[[0., 0., 0.],\n","         [0., 0., 0.]],\n","\n","        [[0., 0., 0.],\n","         [0., 0., 0.]],\n","\n","        [[0., 0., 0.],\n","         [0., 0., 0.]],\n","\n","        [[0., 0., 0.],\n","         [0., 0., 0.]],\n","\n","        [[0., 0., 0.],\n","         [0., 0., 0.]]])\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"13NAPOy75J-F","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1616548652467,"user_tz":-540,"elapsed":1052,"user":{"displayName":"stp L","photoUrl":"","userId":"16125751050798431485"}},"outputId":"78da9a7a-0bee-45ff-e7ee-a4d417e2ead9"},"source":["# 초기화하면서 현재 메모리에 존재하는 값\n","x = torch.empty(5, 3)\n","print(x)\n","\n","x = torch.rand(5, 3)\n","print(x)"],"execution_count":5,"outputs":[{"output_type":"stream","text":["tensor([[1.9018e-01, 3.0624e-41, 3.3631e-44],\n","        [0.0000e+00,        nan, 0.0000e+00],\n","        [1.1578e+27, 1.1362e+30, 7.1547e+22],\n","        [4.5828e+30, 1.2121e+04, 7.1846e+22],\n","        [9.2198e-39, 7.0374e+22, 0.0000e+00]])\n","tensor([[0.5979, 0.2587, 0.0238],\n","        [0.1576, 0.9173, 0.7169],\n","        [0.9284, 0.6573, 0.1447],\n","        [0.5236, 0.7045, 0.6752],\n","        [0.6282, 0.6882, 0.5696]])\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"YyaeipP85Lkl","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1616548655215,"user_tz":-540,"elapsed":1091,"user":{"displayName":"stp L","photoUrl":"","userId":"16125751050798431485"}},"outputId":"610936df-d93e-430c-bc25-f67eee753a40"},"source":["# torch.rand: Returns a tensor filled with random numbers from a uniform distribution on the interval [0, 1)\n","rand_points = torch.rand(4, dtype=torch.double)\n","print(rand_points)\n","\n","rand_points_2 = torch.rand(2, 3, dtype=torch.float)\n","print(rand_points_2)"],"execution_count":6,"outputs":[{"output_type":"stream","text":["tensor([0.5460, 0.5782, 0.5822, 0.5939], dtype=torch.float64)\n","tensor([[0.5625, 0.2200, 0.1556],\n","        [0.9952, 0.9985, 0.7004]])\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"UKBT3e7w5N63","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1616548656740,"user_tz":-540,"elapsed":1694,"user":{"displayName":"stp L","photoUrl":"","userId":"16125751050798431485"}},"outputId":"3ae84907-d68b-418b-bd5a-5bcc40ff76c4"},"source":["# torch.randn: Returns a tensor filled with random numbers\n","# Use normal distribution with mean 0 and variance 1\n","# also called the standard normal distribution\n","\n","randn_points = torch.randn(3, 3)\n","print(randn_points)"],"execution_count":7,"outputs":[{"output_type":"stream","text":["tensor([[ 0.0337, -0.3561,  0.1772],\n","        [-0.0625, -1.0218,  0.0214],\n","        [ 0.5682, -1.5023, -1.1311]])\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"RsT4B1_55Q27","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1616548656741,"user_tz":-540,"elapsed":1254,"user":{"displayName":"stp L","photoUrl":"","userId":"16125751050798431485"}},"outputId":"a297cd56-3e0e-467f-b026-7e424cf83a31"},"source":["# Compute size of matrix\n","print(randn_points.size())"],"execution_count":8,"outputs":[{"output_type":"stream","text":["torch.Size([3, 3])\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"uOrNw5jw5YQb"},"source":["- 실습\n","\n","1. 5 by 4 의 empty tensor를 생성한다\n","2. 3 x 3 의 one matrix를 생성한다\n","3. 2 x 2 의 zero matrix를 생성한다\n","4. 3 x 5의 rand 행렬을 생성한다\n"]},{"cell_type":"code","metadata":{"id":"HSYTd-BR5SkT","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1616548765760,"user_tz":-540,"elapsed":610,"user":{"displayName":"stp L","photoUrl":"","userId":"16125751050798431485"}},"outputId":"07cd59d1-adcc-4d77-eff8-b3324998fb29"},"source":["tensor = torch.empty(5,3)\n","print(tensor)\n","tensor = torch.ones(3,3)\n","print(tensor)\n","tensor = torch.zeros(2,2)\n","print(tensor)\n","tensor = torch.rand(3,5)\n","print(tensor)"],"execution_count":9,"outputs":[{"output_type":"stream","text":["tensor([[1.9934e-01, 3.0624e-41, 1.5975e-43],\n","        [1.3873e-43, 1.4574e-43, 6.4460e-44],\n","        [1.5975e-43, 1.3593e-43, 1.4013e-43],\n","        [7.0065e-44, 1.4013e-43, 1.4153e-43],\n","        [1.4433e-43, 1.6395e-43, 0.0000e+00]])\n","tensor([[1., 1., 1.],\n","        [1., 1., 1.],\n","        [1., 1., 1.]])\n","tensor([[0., 0.],\n","        [0., 0.]])\n","tensor([[0.6563, 0.2010, 0.9836, 0.6433, 0.7207],\n","        [0.5702, 0.1118, 0.7941, 0.5784, 0.9435],\n","        [0.5798, 0.0018, 0.1209, 0.6877, 0.5916]])\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"hoVXYfkQ6EJi"},"source":["### 텐서 인덱스"]},{"cell_type":"code","metadata":{"id":"YR-SbkP557md","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1616548775204,"user_tz":-540,"elapsed":552,"user":{"displayName":"stp L","photoUrl":"","userId":"16125751050798431485"}},"outputId":"247c6e88-925f-4a03-bb01-4987827cdfeb"},"source":["temp = torch.Tensor([0, 1, 2, 3, 4, 5, 6, 7])\n","\n","print(temp[:]) # tensor element 전체\n","print(temp[1:4]) # index 1과 4 사이의 원소들 출력\n","print(temp[1:]) # index 1부터의 원소들 출력\n","print(temp[:4]) # index 4까지의 원소들 출력\n","print(temp[-1]) # 뒤에서 첫번째 원소 출력\n","print(temp[:-1]) # index -1 = 뒤에서부터 index 1에 해당하는 원소까지만 출력\n","print(temp[1:6:2]) # index 1과 6 사이의 원소 출력, 이때 2개 단위로 건너뛰면서"],"execution_count":10,"outputs":[{"output_type":"stream","text":["tensor([0., 1., 2., 3., 4., 5., 6., 7.])\n","tensor([1., 2., 3.])\n","tensor([1., 2., 3., 4., 5., 6., 7.])\n","tensor([0., 1., 2., 3.])\n","tensor(7.)\n","tensor([0., 1., 2., 3., 4., 5., 6.])\n","tensor([1., 3., 5.])\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"0DlQoqKz6H86","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1616548775494,"user_tz":-540,"elapsed":398,"user":{"displayName":"stp L","photoUrl":"","userId":"16125751050798431485"}},"outputId":"5e0ae82f-bd35-44aa-dc1c-4c1e43f4d4fe"},"source":["temp2 = torch.Tensor([[1, 2, 3], [4, 5, 6]])\n","\n","print(temp2)\n","print(temp2[1:])\n","print(temp2[1:, 1:])\n","print(temp2[1:, 0])"],"execution_count":11,"outputs":[{"output_type":"stream","text":["tensor([[1., 2., 3.],\n","        [4., 5., 6.]])\n","tensor([[4., 5., 6.]])\n","tensor([[5., 6.]])\n","tensor([4.])\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"UlDwKTYy6OcF"},"source":["- 실습\n","\n","1. 7 x 10 의 ones matrix를 생성한다\n","2. indexing을 활용해서 위에서 만든 matrix를 3 x 3 으로 바꾼다"]},{"cell_type":"code","metadata":{"id":"nWFWz_AA6JaQ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1616548808929,"user_tz":-540,"elapsed":515,"user":{"displayName":"stp L","photoUrl":"","userId":"16125751050798431485"}},"outputId":"10231037-d9ac-4bd7-e2b6-435c1f23f959"},"source":["tensor = torch.ones(7,10)\n","print(tensor)\n","tensor = tensor[:3,:3]\n","print(tensor)"],"execution_count":13,"outputs":[{"output_type":"stream","text":["tensor([[1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],\n","        [1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],\n","        [1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],\n","        [1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],\n","        [1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],\n","        [1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],\n","        [1., 1., 1., 1., 1., 1., 1., 1., 1., 1.]])\n","tensor([[1., 1., 1.],\n","        [1., 1., 1.],\n","        [1., 1., 1.]])\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"qE4yPVT46nmr"},"source":["### 텐서의 크기와 텐서 변환하기(reshape)"]},{"cell_type":"code","metadata":{"id":"qIWuqeFX6f_X"},"source":["# shape: Returns the size of the tensor\n","a = torch.Tensor([[1, 2, 3], [4, 5, 6]])\n","\n","print(a)\n","print(a.shape)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"XcJf6MOE6rU9"},"source":["# size()\n","print(a.size())"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"rkFhG2ri6snX"},"source":["# Reshape: Returns a tensor with the same data and number of elements as the original tensor but with the specified shape. \n","a_reshape = a.reshape(3, 2)\n","print(a_reshape)\n","print(a_reshape.shape)\n","\n","a_reshape_2 = a.reshape(-1, 2) # the size -1 is inferred from other dimensions\n","print(a_reshape_2)\n","print(a_reshape_2.shape)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"VtPess6T6uWe"},"source":["# if shape is not compatible with the current shape:\n","a_no_reshape = a.reshape(4, 2)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"81B60t5360tj","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1616550163700,"user_tz":-540,"elapsed":634,"user":{"displayName":"stp L","photoUrl":"","userId":"16125751050798431485"}},"outputId":"eb28a45f-c551-4c19-95ae-1c1cded05f33"},"source":["# View: Returns a new tensor with the same data as the original tensor but of a different shape.\n","# reshape과 거의 비슷하게 사용\n","\n","x = torch.randn(4, 4)\n","print(x.size())\n","\n","y = x.view(16)\n","print(y.size())\n","\n","z = x.view(-1, 8)  # the size -1 is inferred from other dimensions\n","print(z.size())"],"execution_count":14,"outputs":[{"output_type":"stream","text":["torch.Size([4, 4])\n","torch.Size([16])\n","torch.Size([2, 8])\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"2wx60xoH7R-8"},"source":["- 실습\n","\n","1. 8x8 랜덤 행렬 생성한다\n","2. 크기를 바꿔주는 view를 사용하여 8x8를 64로 변환한다\n","3. -1을 사용하여 원래 크기 8x8 을 4x4x4로 변환한다"]},{"cell_type":"code","metadata":{"id":"urlim5lL62OI","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1616550253678,"user_tz":-540,"elapsed":609,"user":{"displayName":"stp L","photoUrl":"","userId":"16125751050798431485"}},"outputId":"8ef63053-f879-4e74-a491-7adfc61a1b72"},"source":["x = torch.rand(8,8)\n","y = x.view(64)\n","print(y.size())\n","z = x.view(4,4,-1)\n","print(z.size())"],"execution_count":17,"outputs":[{"output_type":"stream","text":["torch.Size([64])\n","torch.Size([4, 4, 4])\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"q2m4OvLh8JWo"},"source":["### 텐서 연산"]},{"cell_type":"code","metadata":{"id":"gIes-OKQ7wKg","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1616550706519,"user_tz":-540,"elapsed":641,"user":{"displayName":"stp L","photoUrl":"","userId":"16125751050798431485"}},"outputId":"4532fb70-e177-4a1f-ef64-e0dba46a212c"},"source":["x = torch.ones(1, 2)\n","print(x)\n","y = torch.ones(5, 3)\n","print(y)"],"execution_count":18,"outputs":[{"output_type":"stream","text":["tensor([[1., 1.]])\n","tensor([[1., 1., 1.],\n","        [1., 1., 1.],\n","        [1., 1., 1.],\n","        [1., 1., 1.],\n","        [1., 1., 1.]])\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"ueIKWkbL8NEz","colab":{"base_uri":"https://localhost:8080/","height":168},"executionInfo":{"status":"error","timestamp":1616550706772,"user_tz":-540,"elapsed":576,"user":{"displayName":"stp L","photoUrl":"","userId":"16125751050798431485"}},"outputId":"5593bb57-28fd-472e-9ad6-6963e7eb4e7d"},"source":["print(x+y)"],"execution_count":19,"outputs":[{"output_type":"error","ename":"RuntimeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mRuntimeError\u001b[0m                              Traceback (most recent call last)","\u001b[0;32m<ipython-input-19-39cb3db33052>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mRuntimeError\u001b[0m: The size of tensor a (2) must match the size of tensor b (3) at non-singleton dimension 1"]}]},{"cell_type":"code","metadata":{"id":"VNx8Pwkl8OaL","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1616550728233,"user_tz":-540,"elapsed":587,"user":{"displayName":"stp L","photoUrl":"","userId":"16125751050798431485"}},"outputId":"9c8206b0-bec8-40ad-bbe8-630083bca55a"},"source":["y = torch.ones(5, 2)\n","print(y)\n","\n","# 1.\n","print(x+y)\n","# 2. \n","print(torch.add(x, y))\n","# 3.\n","result = torch.empty(5, 2)\n","torch.add(x, y, out=result)\n","print(result)\n","# 4. inplace\n","print(y.add_(x))"],"execution_count":20,"outputs":[{"output_type":"stream","text":["tensor([[1., 1.],\n","        [1., 1.],\n","        [1., 1.],\n","        [1., 1.],\n","        [1., 1.]])\n","tensor([[2., 2.],\n","        [2., 2.],\n","        [2., 2.],\n","        [2., 2.],\n","        [2., 2.]])\n","tensor([[2., 2.],\n","        [2., 2.],\n","        [2., 2.],\n","        [2., 2.],\n","        [2., 2.]])\n","tensor([[2., 2.],\n","        [2., 2.],\n","        [2., 2.],\n","        [2., 2.],\n","        [2., 2.]])\n","tensor([[2., 2.],\n","        [2., 2.],\n","        [2., 2.],\n","        [2., 2.],\n","        [2., 2.]])\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"Geq5Pr-t8aiO"},"source":["### 텐서를 numpy로 변환하기"]},{"cell_type":"code","metadata":{"id":"kYrdfHKm8Qjm","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1616550789050,"user_tz":-540,"elapsed":593,"user":{"displayName":"stp L","photoUrl":"","userId":"16125751050798431485"}},"outputId":"7c5a13c5-6cff-4737-9534-0fb52bcce014"},"source":["# tensor to numpy array\n","\n","points = torch.ones(3, 4)\n","points_np = points.numpy()\n","\n","print(points_np)"],"execution_count":21,"outputs":[{"output_type":"stream","text":["[[1. 1. 1. 1.]\n"," [1. 1. 1. 1.]\n"," [1. 1. 1. 1.]]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"tIRtFWUK8ebj","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1616550791471,"user_tz":-540,"elapsed":545,"user":{"displayName":"stp L","photoUrl":"","userId":"16125751050798431485"}},"outputId":"7cb71451-77de-450d-d223-e6e83095a3aa"},"source":["# numpy arrray to tensor\n","points = torch.from_numpy(points_np)\n","\n","print(points)"],"execution_count":22,"outputs":[{"output_type":"stream","text":["tensor([[1., 1., 1., 1.],\n","        [1., 1., 1., 1.],\n","        [1., 1., 1., 1.]])\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"v6gVHYE48oH4"},"source":["#### List, Numpy 배열을 텐서로 만들기"]},{"cell_type":"code","metadata":{"id":"LL6vnvaW8u0Y","executionInfo":{"status":"ok","timestamp":1616550835239,"user_tz":-540,"elapsed":558,"user":{"displayName":"stp L","photoUrl":"","userId":"16125751050798431485"}}},"source":["import numpy as np"],"execution_count":23,"outputs":[]},{"cell_type":"code","metadata":{"id":"5sX3dFgI8f6z","executionInfo":{"status":"ok","timestamp":1616550835505,"user_tz":-540,"elapsed":454,"user":{"displayName":"stp L","photoUrl":"","userId":"16125751050798431485"}}},"source":["l = [13,4] # 리스트 생성\n","r = np.array([4,56,7]) # 넘파이 배열 생성"],"execution_count":24,"outputs":[]},{"cell_type":"code","metadata":{"id":"nltYH4m_8szC","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1616550836047,"user_tz":-540,"elapsed":573,"user":{"displayName":"stp L","photoUrl":"","userId":"16125751050798431485"}},"outputId":"616b8160-0260-4295-ad98-6801940e288a"},"source":["torch.tensor(l) # 리스트를 텐서로 쉽게 변환할 수 있다."],"execution_count":25,"outputs":[{"output_type":"execute_result","data":{"text/plain":["tensor([13,  4])"]},"metadata":{"tags":[]},"execution_count":25}]},{"cell_type":"code","metadata":{"id":"b05CcQ7a8yCg","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1616550836355,"user_tz":-540,"elapsed":487,"user":{"displayName":"stp L","photoUrl":"","userId":"16125751050798431485"}},"outputId":"e7edc1fa-f9e1-45fc-bc29-4449d553186d"},"source":["torch.tensor(r) # 넘파이 배열을 텐서로 쉽게 변환할 수 있다."],"execution_count":26,"outputs":[{"output_type":"execute_result","data":{"text/plain":["tensor([ 4, 56,  7])"]},"metadata":{"tags":[]},"execution_count":26}]},{"cell_type":"markdown","metadata":{"id":"8--Mr-qG-idR"},"source":["## Backpropagation\n","\n","- PyTorch는 역전파(backpropagation)를 위한 자동미분 제공"]},{"cell_type":"code","metadata":{"id":"-4sEdz7Y8zAM","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1616550849778,"user_tz":-540,"elapsed":865,"user":{"displayName":"stp L","photoUrl":"","userId":"16125751050798431485"}},"outputId":"e6948116-bf1b-47e7-9c8f-6c5947c54a81"},"source":["# requires_grad=True는 해당 텐서(x)를 기준으로 모든 연산을 추적하는 옵션이다\n","# 즉, x에 대해서 미분가능\n","x = torch.ones(2,2, requires_grad=True)\n","print(x)"],"execution_count":27,"outputs":[{"output_type":"stream","text":["tensor([[1., 1.],\n","        [1., 1.]], requires_grad=True)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"YI9R6Ncm--DU","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1616550850006,"user_tz":-540,"elapsed":793,"user":{"displayName":"stp L","photoUrl":"","userId":"16125751050798431485"}},"outputId":"b9dda22e-e977-42d5-a129-c4f200b39ded"},"source":["# y는 x에 대한 식\n","y = x + 1\n","\n","# z는 y에 대한 식\n","z = 2*y**2\n","\n","# res는 z에 대한 식이다\n","res = z.mean()\n","\n","# x에 대해 미분가능\n","print(\"y: \", y)\n","print(\"z: \", z)\n","print(\"Result: \", res)"],"execution_count":28,"outputs":[{"output_type":"stream","text":["y:  tensor([[2., 2.],\n","        [2., 2.]], grad_fn=<AddBackward0>)\n","z:  tensor([[8., 8.],\n","        [8., 8.]], grad_fn=<MulBackward0>)\n","Result:  tensor(8., grad_fn=<MeanBackward0>)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"lYCphJOE-_pP"},"source":["# res를 기준으로 역전파를 한다\n","# ex. loss.backward()\n","\n","# res = (z_1 + .. +z_4)/4\n","# z_i = 2(y_i)**2\n","# z_i = 2(x_i+1)**2\n","# d(res)/dx_i = x_i + 1\n","\n","res.backward()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"LvulBR9f_oJ4"},"source":["print(x)\n","print(x.grad)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"vJ1GYo6q_q4e"},"source":[""],"execution_count":null,"outputs":[]}]}