{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"01-PyTorch-Basic.ipynb의 사본","provenance":[],"collapsed_sections":[],"toc_visible":true},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","metadata":{"id":"J4er6OCm4gY6"},"source":["# PyTorch 101\n","\n","- PyTorch tutorial website 참고(https://tutorials.pytorch.kr/beginner/deep_learning_60min_blitz.html)\n","- PyTorch is multidimensional arrays, tensors and an extensive library of operations on them"]},{"cell_type":"code","metadata":{"id":"QXutfY7p4Raq","executionInfo":{"status":"ok","timestamp":1616548098051,"user_tz":-540,"elapsed":3749,"user":{"displayName":"뚜비뚜밥","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgfZGckmFBqHp4I9GP8lt6do2pbk5iERdwNPQxScxk=s64","userId":"06141106450054960309"}}},"source":["# torch가 설치되어 있지 않다면\n","# https://pytorch.org 에서 환경에 맞는 command로 설치하거나\n","# !pip install torch 또는 !pip3 install torch (Python3 환경임을 명시)\n","\n","import torch"],"execution_count":1,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"V4k-VyJH4zDo"},"source":["## 1. Tensor\n","\n","- PyTorch의 기본 단위이며 Numpy의 배열과 유사하다"]},{"cell_type":"markdown","metadata":{"id":"44UijOVf4_Hs"},"source":["### 텐서 만들기"]},{"cell_type":"code","metadata":{"id":"UA86Mdu54xQ-","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1616548098052,"user_tz":-540,"elapsed":3744,"user":{"displayName":"뚜비뚜밥","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgfZGckmFBqHp4I9GP8lt6do2pbk5iERdwNPQxScxk=s64","userId":"06141106450054960309"}},"outputId":"daf48788-91c2-4320-9842-7b5e8de98520"},"source":["# Create a torch.Tensor object with the given data.  It is a 1D vector\n","V_data = [1., 2., 3.]\n","V = torch.Tensor(V_data)\n","print(V)\n","\n","# Creates a matrix\n","M_data = [[1., 2., 3.], [4., 5., 6]]\n","M = torch.Tensor(M_data)\n","print(M)\n","\n","# Create a 3D tensor of size 2x2x2.\n","T_data = [[[1.,2.], [3.,4.]],\n","          [[5.,6.], [7.,8.]]]\n","T = torch.Tensor(T_data)\n","print(T)"],"execution_count":2,"outputs":[{"output_type":"stream","text":["tensor([1., 2., 3.])\n","tensor([[1., 2., 3.],\n","        [4., 5., 6.]])\n","tensor([[[1., 2.],\n","         [3., 4.]],\n","\n","        [[5., 6.],\n","         [7., 8.]]])\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"56jWpi7R5EoN","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1616548101604,"user_tz":-540,"elapsed":1005,"user":{"displayName":"뚜비뚜밥","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgfZGckmFBqHp4I9GP8lt6do2pbk5iERdwNPQxScxk=s64","userId":"06141106450054960309"}},"outputId":"5250fcb3-cf99-44c1-c991-6b260a790945"},"source":["# torch.ones: create a tensor filled with 1.0\n","a = torch.ones(3)\n","print(a)\n","\n","b = torch.ones(2, 3)\n","print(b)"],"execution_count":4,"outputs":[{"output_type":"stream","text":["tensor([1., 1., 1.])\n","tensor([[1., 1., 1.],\n","        [1., 1., 1.]])\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"QNgsgOGB5FRC","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1616548103113,"user_tz":-540,"elapsed":1094,"user":{"displayName":"뚜비뚜밥","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgfZGckmFBqHp4I9GP8lt6do2pbk5iERdwNPQxScxk=s64","userId":"06141106450054960309"}},"outputId":"e04fada7-f71a-4f14-e1e7-2605bdcb724e"},"source":["# torch.zeros: create a tensor filled with 0.0\n","c = torch.zeros(4)\n","print(c)\n","\n","d = torch.zeros(5, 2, 3)\n","print(d)"],"execution_count":5,"outputs":[{"output_type":"stream","text":["tensor([0., 0., 0., 0.])\n","tensor([[[0., 0., 0.],\n","         [0., 0., 0.]],\n","\n","        [[0., 0., 0.],\n","         [0., 0., 0.]],\n","\n","        [[0., 0., 0.],\n","         [0., 0., 0.]],\n","\n","        [[0., 0., 0.],\n","         [0., 0., 0.]],\n","\n","        [[0., 0., 0.],\n","         [0., 0., 0.]]])\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"13NAPOy75J-F","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1616548105938,"user_tz":-540,"elapsed":1138,"user":{"displayName":"뚜비뚜밥","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgfZGckmFBqHp4I9GP8lt6do2pbk5iERdwNPQxScxk=s64","userId":"06141106450054960309"}},"outputId":"92ef11f2-2374-490f-e873-ff78d532de76"},"source":["# 초기화하면서 현재 메모리에 존재하는 값\n","x = torch.empty(5, 3)\n","print(x)\n","\n","x = torch.rand(5, 3)\n","print(x)"],"execution_count":6,"outputs":[{"output_type":"stream","text":["tensor([[-1.0738e+25,  3.0802e-41,  3.3631e-44],\n","        [ 0.0000e+00,         nan,  0.0000e+00],\n","        [ 1.1578e+27,  1.1362e+30,  7.1547e+22],\n","        [ 4.5828e+30,  1.2121e+04,  7.1846e+22],\n","        [ 9.2198e-39,  7.0374e+22,  0.0000e+00]])\n","tensor([[0.0577, 0.5410, 0.2111],\n","        [0.7670, 0.3732, 0.7457],\n","        [0.3627, 0.1412, 0.6654],\n","        [0.8412, 0.8601, 0.7851],\n","        [0.1437, 0.8192, 0.8020]])\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"YyaeipP85Lkl","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1616548110717,"user_tz":-540,"elapsed":1012,"user":{"displayName":"뚜비뚜밥","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgfZGckmFBqHp4I9GP8lt6do2pbk5iERdwNPQxScxk=s64","userId":"06141106450054960309"}},"outputId":"aefea3a7-2ddf-4539-b323-d845d3c7eccf"},"source":["# torch.rand: Returns a tensor filled with random numbers from a uniform distribution on the interval [0, 1)\n","rand_points = torch.rand(4, dtype=torch.double)\n","print(rand_points)\n","\n","rand_points_2 = torch.rand(2, 3, dtype=torch.float)\n","print(rand_points_2)"],"execution_count":7,"outputs":[{"output_type":"stream","text":["tensor([0.5367, 0.2653, 0.7954, 0.1625], dtype=torch.float64)\n","tensor([[0.7500, 0.4289, 0.5963],\n","        [0.2704, 0.0062, 0.8925]])\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"UKBT3e7w5N63","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1616548117098,"user_tz":-540,"elapsed":1026,"user":{"displayName":"뚜비뚜밥","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgfZGckmFBqHp4I9GP8lt6do2pbk5iERdwNPQxScxk=s64","userId":"06141106450054960309"}},"outputId":"9b66f96c-9eaf-4742-80fa-72256334907b"},"source":["# torch.randn: Returns a tensor filled with random numbers\n","# Use normal distribution with mean 0 and variance 1\n","# also called the standard normal distribution\n","\n","randn_points = torch.randn(3, 3)\n","print(randn_points)"],"execution_count":8,"outputs":[{"output_type":"stream","text":["tensor([[ 0.2791, -1.6086,  0.2818],\n","        [-0.1566, -2.7740,  1.0555],\n","        [-1.0524,  1.6888, -0.4601]])\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"RsT4B1_55Q27","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1616548124504,"user_tz":-540,"elapsed":1047,"user":{"displayName":"뚜비뚜밥","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgfZGckmFBqHp4I9GP8lt6do2pbk5iERdwNPQxScxk=s64","userId":"06141106450054960309"}},"outputId":"18811d6d-5b4c-4218-8152-182535f8efe3"},"source":["# Compute size of matrix\n","print(randn_points.size())"],"execution_count":9,"outputs":[{"output_type":"stream","text":["torch.Size([3, 3])\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"uOrNw5jw5YQb"},"source":["- 실습\n","\n","1. 5 by 4 의 empty tensor를 생성한다\n","2. 3 x 3 의 one matrix를 생성한다\n","3. 2 x 2 의 zero matrix를 생성한다\n","4. 3 x 5의 rand 행렬을 생성한다\n"]},{"cell_type":"code","metadata":{"id":"HSYTd-BR5SkT","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1616548433949,"user_tz":-540,"elapsed":539,"user":{"displayName":"뚜비뚜밥","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgfZGckmFBqHp4I9GP8lt6do2pbk5iERdwNPQxScxk=s64","userId":"06141106450054960309"}},"outputId":"8cd11a41-7f85-4185-c514-9d1efdca1746"},"source":["ts1 = torch.empty(5,4) #5x4 짜리 랜덤 매트릭스\n","ts2 = torch.ones(3,3) #1로 채운 매트릭스\n","ts3 = torch.zeros(2,2) #0으로 채운 매트릭스\n","ts4 = torch.randn(3,5) #랜덤숫자 매트릭스(0~1: rand)\n","\n","print(ts1)\n","print(ts2)\n","print(ts3)\n","print(ts4)"],"execution_count":15,"outputs":[{"output_type":"stream","text":["tensor([[-1.2023e+25,  3.0802e-41,  7.0065e-44,  6.8664e-44],\n","        [ 6.3058e-44,  6.7262e-44,  7.1466e-44,  6.3058e-44],\n","        [ 7.0065e-44,  7.2868e-44,  1.1771e-43,  6.7262e-44],\n","        [ 6.8664e-44,  8.1275e-44,  6.8664e-44,  7.1466e-44],\n","        [ 8.1275e-44,  7.4269e-44,  7.1466e-44,  6.4460e-44]])\n","tensor([[1., 1., 1.],\n","        [1., 1., 1.],\n","        [1., 1., 1.]])\n","tensor([[0., 0.],\n","        [0., 0.]])\n","tensor([[-1.1361,  0.6227,  1.7883, -0.5017,  0.1372],\n","        [-0.1268,  2.3373,  0.9328, -1.5538, -0.5436],\n","        [ 0.1394,  1.3446,  1.0298,  0.2598,  1.2612]])\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"hoVXYfkQ6EJi"},"source":["### 텐서 인덱스"]},{"cell_type":"code","metadata":{"id":"YR-SbkP557md","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1616548468708,"user_tz":-540,"elapsed":759,"user":{"displayName":"뚜비뚜밥","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgfZGckmFBqHp4I9GP8lt6do2pbk5iERdwNPQxScxk=s64","userId":"06141106450054960309"}},"outputId":"da31a0b2-c0df-4968-d1fd-f2031d562eee"},"source":["temp = torch.Tensor([0, 1, 2, 3, 4, 5, 6, 7])\n","\n","print(temp[:]) # tensor element 전체\n","print(temp[1:4]) # index 1과 4 사이의 원소들 출력\n","print(temp[1:]) # index 1부터의 원소들 출력\n","print(temp[:4]) # index 4까지의 원소들 출력\n","print(temp[-1]) # 뒤에서 첫번째 원소 출력\n","print(temp[:-1]) # index -1 = 뒤에서부터 index 1에 해당하는 원소까지만 출력\n","print(temp[1:6:2]) # index 1과 6 사이의 원소 출력, 이때 2개 단위로 건너뛰면서"],"execution_count":16,"outputs":[{"output_type":"stream","text":["tensor([0., 1., 2., 3., 4., 5., 6., 7.])\n","tensor([0., 1., 2., 3., 4., 5., 6., 7.])\n","tensor([1., 2., 3.])\n","tensor([1., 2., 3., 4., 5., 6., 7.])\n","tensor([0., 1., 2., 3.])\n","tensor(7.)\n","tensor([0., 1., 2., 3., 4., 5., 6.])\n","tensor([1., 3., 5.])\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"0DlQoqKz6H86","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1616548518907,"user_tz":-540,"elapsed":659,"user":{"displayName":"뚜비뚜밥","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgfZGckmFBqHp4I9GP8lt6do2pbk5iERdwNPQxScxk=s64","userId":"06141106450054960309"}},"outputId":"f2e2ad77-05e5-4429-b8db-6cd76bc1d24d"},"source":["temp2 = torch.Tensor([[1, 2, 3], [4, 5, 6]])\n","\n","print(temp2)\n","print(temp2[1:])\n","print(temp2[1:, 1:])\n","print(temp2[1:, 0])"],"execution_count":17,"outputs":[{"output_type":"stream","text":["tensor([[1., 2., 3.],\n","        [4., 5., 6.]])\n","tensor([[4., 5., 6.]])\n","tensor([[5., 6.]])\n","tensor([4.])\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"UlDwKTYy6OcF"},"source":["- 실습\n","\n","1. 7 x 10 의 ones matrix를 생성한다\n","2. indexing을 활용해서 위에서 만든 matrix를 3 x 3 으로 바꾼다"]},{"cell_type":"code","metadata":{"id":"nWFWz_AA6JaQ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1616548691290,"user_tz":-540,"elapsed":530,"user":{"displayName":"뚜비뚜밥","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgfZGckmFBqHp4I9GP8lt6do2pbk5iERdwNPQxScxk=s64","userId":"06141106450054960309"}},"outputId":"7f7d5b51-d57b-428c-a747-f73fa293f215"},"source":["t1 = torch.ones(7,10)\n","t2 = t1[:3,:3]\n","\n","print(t1)\n","print(t2)\n","\n"],"execution_count":20,"outputs":[{"output_type":"stream","text":["tensor([[1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],\n","        [1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],\n","        [1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],\n","        [1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],\n","        [1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],\n","        [1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],\n","        [1., 1., 1., 1., 1., 1., 1., 1., 1., 1.]])\n","tensor([[1., 1., 1.],\n","        [1., 1., 1.],\n","        [1., 1., 1.]])\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"qE4yPVT46nmr"},"source":["### 텐서의 크기와 텐서 변환하기(reshape)"]},{"cell_type":"code","metadata":{"id":"qIWuqeFX6f_X","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1616549831235,"user_tz":-540,"elapsed":560,"user":{"displayName":"뚜비뚜밥","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgfZGckmFBqHp4I9GP8lt6do2pbk5iERdwNPQxScxk=s64","userId":"06141106450054960309"}},"outputId":"5faf8bb1-6048-4cdb-93b9-e72fd90c67a9"},"source":["# shape: Returns the size of the tensor\n","a = torch.Tensor([[1, 2, 3], [4, 5, 6]])\n","\n","print(a)\n","print(a.shape)"],"execution_count":21,"outputs":[{"output_type":"stream","text":["tensor([[1., 2., 3.],\n","        [4., 5., 6.]])\n","torch.Size([2, 3])\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"XcJf6MOE6rU9","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1616549870616,"user_tz":-540,"elapsed":546,"user":{"displayName":"뚜비뚜밥","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgfZGckmFBqHp4I9GP8lt6do2pbk5iERdwNPQxScxk=s64","userId":"06141106450054960309"}},"outputId":"a036b269-cc00-47d0-9268-7eb2d68eb984"},"source":["# size()\n","print(a.size())"],"execution_count":22,"outputs":[{"output_type":"stream","text":["torch.Size([2, 3])\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"rkFhG2ri6snX","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1616550059674,"user_tz":-540,"elapsed":562,"user":{"displayName":"뚜비뚜밥","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgfZGckmFBqHp4I9GP8lt6do2pbk5iERdwNPQxScxk=s64","userId":"06141106450054960309"}},"outputId":"393c1e5a-0179-496d-9a30-ff2858d37587"},"source":["# Reshape: Returns a tensor with the same data and number of elements as the original tensor but with the specified shape. \n","a_reshape = a.reshape(3, 2)\n","print(a_reshape)\n","print(a_reshape.shape)\n","\n","a_reshape_2 = a.reshape(-1, 2) # the size -1 is inferred from other dimensions\n","print(a_reshape_2)\n","print(a_reshape_2.shape)"],"execution_count":23,"outputs":[{"output_type":"stream","text":["tensor([[1., 2.],\n","        [3., 4.],\n","        [5., 6.]])\n","torch.Size([3, 2])\n","tensor([[1., 2.],\n","        [3., 4.],\n","        [5., 6.]])\n","torch.Size([3, 2])\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"VtPess6T6uWe"},"source":["# if shape is not compatible with the current shape:\n","a_no_reshape = a.reshape(4, 2)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"81B60t5360tj","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1616550068575,"user_tz":-540,"elapsed":635,"user":{"displayName":"뚜비뚜밥","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgfZGckmFBqHp4I9GP8lt6do2pbk5iERdwNPQxScxk=s64","userId":"06141106450054960309"}},"outputId":"bae84a27-69cf-4629-94bf-b3b42b9a3f86"},"source":["# View: Returns a new tensor with the same data as the original tensor but of a different shape.\n","# reshape과 거의 비슷하게 사용\n","\n","x = torch.randn(4, 4)\n","print(x.size())\n","\n","y = x.view(16)\n","print(y.size())\n","\n","z = x.view(-1, 8)  # the size -1 is inferred from other dimensions\n","print(z.size())"],"execution_count":24,"outputs":[{"output_type":"stream","text":["torch.Size([4, 4])\n","torch.Size([16])\n","torch.Size([2, 8])\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"2wx60xoH7R-8"},"source":["- 실습\n","\n","1. 8x8 랜덤 행렬 생성한다\n","2. 크기를 바꿔주는 view를 사용하여 8x8를 64로 변환한다\n","3. -1을 사용하여 원래 크기 8x8 을 4x4x4로 변환한다"]},{"cell_type":"code","metadata":{"id":"urlim5lL62OI","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1616550390522,"user_tz":-540,"elapsed":523,"user":{"displayName":"뚜비뚜밥","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgfZGckmFBqHp4I9GP8lt6do2pbk5iERdwNPQxScxk=s64","userId":"06141106450054960309"}},"outputId":"1beb42b4-2259-4113-e4de-703a872602c0"},"source":["x = torch.randn(8,8)\n","y = x.view(64)\n","z = x.view(-1, 4, 4)\n","\n","print(x.shape)\n","print(y.shape)\n","print(z.shape)"],"execution_count":31,"outputs":[{"output_type":"stream","text":["torch.Size([8, 8])\n","torch.Size([64])\n","torch.Size([4, 4, 4])\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"q2m4OvLh8JWo"},"source":["### 텐서 연산"]},{"cell_type":"code","metadata":{"id":"gIes-OKQ7wKg","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1616550490737,"user_tz":-540,"elapsed":550,"user":{"displayName":"뚜비뚜밥","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgfZGckmFBqHp4I9GP8lt6do2pbk5iERdwNPQxScxk=s64","userId":"06141106450054960309"}},"outputId":"beb7bc88-0392-49db-a693-f666aeedf13b"},"source":["x = torch.ones(1, 2)\n","print(x)\n","y = torch.ones(5, 3)\n","print(y)"],"execution_count":35,"outputs":[{"output_type":"stream","text":["tensor([[1., 1.]])\n","tensor([[1., 1., 1.],\n","        [1., 1., 1.],\n","        [1., 1., 1.],\n","        [1., 1., 1.],\n","        [1., 1., 1.]])\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"ueIKWkbL8NEz","colab":{"base_uri":"https://localhost:8080/","height":168},"executionInfo":{"status":"error","timestamp":1616550433450,"user_tz":-540,"elapsed":525,"user":{"displayName":"뚜비뚜밥","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgfZGckmFBqHp4I9GP8lt6do2pbk5iERdwNPQxScxk=s64","userId":"06141106450054960309"}},"outputId":"56ebee7d-798d-4af0-dc9f-88aa97147cbd"},"source":["print(x+y)"],"execution_count":33,"outputs":[{"output_type":"error","ename":"RuntimeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mRuntimeError\u001b[0m                              Traceback (most recent call last)","\u001b[0;32m<ipython-input-33-39cb3db33052>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mRuntimeError\u001b[0m: The size of tensor a (2) must match the size of tensor b (3) at non-singleton dimension 1"]}]},{"cell_type":"code","metadata":{"id":"VNx8Pwkl8OaL","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1616550572624,"user_tz":-540,"elapsed":551,"user":{"displayName":"뚜비뚜밥","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgfZGckmFBqHp4I9GP8lt6do2pbk5iERdwNPQxScxk=s64","userId":"06141106450054960309"}},"outputId":"c43668af-dca6-4dd1-8536-47b252c983b3"},"source":["y = torch.ones(5, 2)\n","print(y)\n","\n","print(x)\n","# 1.\n","print(x+y)\n","# 2. \n","print(torch.add(x, y))\n","# 3.\n","result = torch.empty(5, 2)\n","torch.add(x, y, out=result)\n","print(result)\n","# 4. inplace\n","print(y.add_(x))"],"execution_count":37,"outputs":[{"output_type":"stream","text":["tensor([[1., 1.],\n","        [1., 1.],\n","        [1., 1.],\n","        [1., 1.],\n","        [1., 1.]])\n","tensor([[1., 1.]])\n","tensor([[2., 2.],\n","        [2., 2.],\n","        [2., 2.],\n","        [2., 2.],\n","        [2., 2.]])\n","tensor([[2., 2.],\n","        [2., 2.],\n","        [2., 2.],\n","        [2., 2.],\n","        [2., 2.]])\n","tensor([[2., 2.],\n","        [2., 2.],\n","        [2., 2.],\n","        [2., 2.],\n","        [2., 2.]])\n","tensor([[2., 2.],\n","        [2., 2.],\n","        [2., 2.],\n","        [2., 2.],\n","        [2., 2.]])\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"Geq5Pr-t8aiO"},"source":["### 텐서를 numpy로 변환하기"]},{"cell_type":"code","metadata":{"id":"kYrdfHKm8Qjm","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1616550587661,"user_tz":-540,"elapsed":542,"user":{"displayName":"뚜비뚜밥","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgfZGckmFBqHp4I9GP8lt6do2pbk5iERdwNPQxScxk=s64","userId":"06141106450054960309"}},"outputId":"fef87f3c-91d5-418f-918c-72a41dc25b8c"},"source":["# tensor to numpy array\n","\n","points = torch.ones(3, 4)\n","points_np = points.numpy()\n","\n","print(points_np)"],"execution_count":38,"outputs":[{"output_type":"stream","text":["[[1. 1. 1. 1.]\n"," [1. 1. 1. 1.]\n"," [1. 1. 1. 1.]]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"tIRtFWUK8ebj","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1616550602677,"user_tz":-540,"elapsed":547,"user":{"displayName":"뚜비뚜밥","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgfZGckmFBqHp4I9GP8lt6do2pbk5iERdwNPQxScxk=s64","userId":"06141106450054960309"}},"outputId":"7fc0bbdf-ee12-49b4-b44b-ae47ba30e8d5"},"source":["# numpy arrray to tensor\n","points = torch.from_numpy(points_np)\n","\n","print(points)"],"execution_count":39,"outputs":[{"output_type":"stream","text":["tensor([[1., 1., 1., 1.],\n","        [1., 1., 1., 1.],\n","        [1., 1., 1., 1.]])\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"v6gVHYE48oH4"},"source":["#### List, Numpy 배열을 텐서로 만들기"]},{"cell_type":"code","metadata":{"id":"LL6vnvaW8u0Y"},"source":["import numpy as np"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"5sX3dFgI8f6z"},"source":["l = [13,4] # 리스트 생성\n","r = np.array([4,56,7]) # 넘파이 배열 생성"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"nltYH4m_8szC"},"source":["torch.tensor(l) # 리스트를 텐서로 쉽게 변환할 수 있다."],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"b05CcQ7a8yCg"},"source":["torch.tensor(r) # 넘파이 배열을 텐서로 쉽게 변환할 수 있다."],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"8--Mr-qG-idR"},"source":["## Backpropagation\n","\n","- PyTorch는 역전파(backpropagation)를 위한 자동미분 제공"]},{"cell_type":"code","metadata":{"id":"-4sEdz7Y8zAM","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1616550763435,"user_tz":-540,"elapsed":555,"user":{"displayName":"뚜비뚜밥","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgfZGckmFBqHp4I9GP8lt6do2pbk5iERdwNPQxScxk=s64","userId":"06141106450054960309"}},"outputId":"f9037f02-1426-40fb-c72d-e4b3fa79297b"},"source":["# requires_grad=True는 해당 텐서(x)를 기준으로 모든 연산을 추적하는 옵션이다\n","# 즉, x에 대해서 미분가능\n","x = torch.ones(2,2, requires_grad=True)\n","print(x)"],"execution_count":40,"outputs":[{"output_type":"stream","text":["tensor([[1., 1.],\n","        [1., 1.]], requires_grad=True)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"YI9R6Ncm--DU","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1616550955200,"user_tz":-540,"elapsed":652,"user":{"displayName":"뚜비뚜밥","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgfZGckmFBqHp4I9GP8lt6do2pbk5iERdwNPQxScxk=s64","userId":"06141106450054960309"}},"outputId":"00a3f675-c74e-4ae6-98f2-7652cc2d6434"},"source":["# y는 x에 대한 식\n","y = x + 1\n","\n","# z는 y에 대한 식\n","z = 2*y**2\n","\n","# res는 z에 대한 식이다\n","res = z.mean()\n","\n","# x에 대해 미분가능\n","print(\"y: \", y)\n","print(\"z: \", z)\n","print(\"Result: \", res)"],"execution_count":44,"outputs":[{"output_type":"stream","text":["y:  tensor([[2., 2.],\n","        [2., 2.]], grad_fn=<AddBackward0>)\n","z:  tensor([[8., 8.],\n","        [8., 8.]], grad_fn=<MulBackward0>)\n","Result:  tensor(8., grad_fn=<MeanBackward0>)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"lYCphJOE-_pP","executionInfo":{"status":"ok","timestamp":1616550957137,"user_tz":-540,"elapsed":545,"user":{"displayName":"뚜비뚜밥","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgfZGckmFBqHp4I9GP8lt6do2pbk5iERdwNPQxScxk=s64","userId":"06141106450054960309"}}},"source":["# res를 기준으로 역전파를 한다\n","# ex. loss.backward()\n","\n","# res = (z_1 + .. +z_4)/4\n","# z_i = 2(y_i)**2\n","# z_i = 2(x_i+1)**2\n","# d(res)/dx_i = x_i + 1\n","\n","res.backward()"],"execution_count":45,"outputs":[]},{"cell_type":"code","metadata":{"id":"LvulBR9f_oJ4","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1616550960613,"user_tz":-540,"elapsed":533,"user":{"displayName":"뚜비뚜밥","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgfZGckmFBqHp4I9GP8lt6do2pbk5iERdwNPQxScxk=s64","userId":"06141106450054960309"}},"outputId":"d04a8f62-914d-4a6f-bd91-d63a9246c17b"},"source":["print(x)\n","print(x.grad)"],"execution_count":46,"outputs":[{"output_type":"stream","text":["tensor([[1., 1.],\n","        [1., 1.]], requires_grad=True)\n","tensor([[4., 4.],\n","        [4., 4.]])\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"vJ1GYo6q_q4e"},"source":[""],"execution_count":null,"outputs":[]}]}