{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"04-Simple Classifier.ipynb의 사본의 사본","provenance":[{"file_id":"1CPGmSj01Zzvtm4CnzVaFyldZkM1WsvYm","timestamp":1616553502662}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","metadata":{"id":"mSLVwmArVNNh","executionInfo":{"status":"ok","timestamp":1616554247447,"user_tz":-540,"elapsed":611,"user":{"displayName":"stp L","photoUrl":"","userId":"16125751050798431485"}}},"source":["from sklearn.datasets import load_iris\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import StandardScaler\n","import pandas as pd\n","import numpy as np\n","from sklearn.preprocessing import MinMaxScaler\n","import torch\n","from torch import nn, optim \n","from torch.utils.data import DataLoader, Dataset \n","import torch.nn.functional as F"],"execution_count":9,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Eg9lxRY7aG2Y"},"source":["## 1. 데이터 불러오기\n","\n","- `load_iris`를 사용하여 데이터를 불러온다. \n","- to_numpy, reshape 등을 활용하여 적절한 포맷으로 변경한다\n","\n"]},{"cell_type":"code","metadata":{"id":"vIfzTnfOaYlP","executionInfo":{"status":"ok","timestamp":1616554211715,"user_tz":-540,"elapsed":4068,"user":{"displayName":"stp L","photoUrl":"","userId":"16125751050798431485"}}},"source":["iris = load_iris() # 데이터 불러오기"],"execution_count":4,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"vpdHvCjVaZEz"},"source":["## 2. Dataset 정의하기\n","\n","- x 데이터의 타입과 y 데이터의 타입을 고려하여 init을 설정한다\n","- 0.2 비율로 train/test로 데이터셋을 나누고, dataloader를 구성한다. batch_size는 자유롭게 정해도 되지만, 되도록 작은 숫자로 정한다(예. 16)"]},{"cell_type":"code","metadata":{"id":"49bta2v9V1Gf","colab":{"base_uri":"https://localhost:8080/","height":204},"executionInfo":{"status":"ok","timestamp":1616560454500,"user_tz":-540,"elapsed":588,"user":{"displayName":"stp L","photoUrl":"","userId":"16125751050798431485"}},"outputId":"9475974a-0a32-44fd-bad3-428bd525d285"},"source":["# data, feature name 등 다양한 정보를 포함하고 있다.\n","df = pd.DataFrame(iris.data) \n","df.columns = iris.feature_names \n","df['label'] = iris.target \n","\n","df.head()"],"execution_count":58,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>sepal length (cm)</th>\n","      <th>sepal width (cm)</th>\n","      <th>petal length (cm)</th>\n","      <th>petal width (cm)</th>\n","      <th>label</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>5.1</td>\n","      <td>3.5</td>\n","      <td>1.4</td>\n","      <td>0.2</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>4.9</td>\n","      <td>3.0</td>\n","      <td>1.4</td>\n","      <td>0.2</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>4.7</td>\n","      <td>3.2</td>\n","      <td>1.3</td>\n","      <td>0.2</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4.6</td>\n","      <td>3.1</td>\n","      <td>1.5</td>\n","      <td>0.2</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5.0</td>\n","      <td>3.6</td>\n","      <td>1.4</td>\n","      <td>0.2</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   sepal length (cm)  sepal width (cm)  ...  petal width (cm)  label\n","0                5.1               3.5  ...               0.2      0\n","1                4.9               3.0  ...               0.2      0\n","2                4.7               3.2  ...               0.2      0\n","3                4.6               3.1  ...               0.2      0\n","4                5.0               3.6  ...               0.2      0\n","\n","[5 rows x 5 columns]"]},"metadata":{"tags":[]},"execution_count":58}]},{"cell_type":"code","metadata":{"id":"B4-Coj19V7Gb","executionInfo":{"status":"ok","timestamp":1616560472842,"user_tz":-540,"elapsed":580,"user":{"displayName":"stp L","photoUrl":"","userId":"16125751050798431485"}}},"source":["X = df.drop('label', axis=1).to_numpy() \n","Y = df['label'].to_numpy().reshape((-1,1))\n","\n","# 데이터 스케일링\n","scaler = MinMaxScaler() \n","scaler.fit(X) \n","X = scaler.transform(X)\n","\n","scaler.fit(Y)\n","Y = scaler.transform(Y)"],"execution_count":61,"outputs":[]},{"cell_type":"code","metadata":{"id":"qKjy0cbOJRgB","executionInfo":{"status":"ok","timestamp":1616560474352,"user_tz":-540,"elapsed":698,"user":{"displayName":"stp L","photoUrl":"","userId":"16125751050798431485"}}},"source":["class TensorData(Dataset):\n","    def __init__(self, x_data, y_data):\n","        self.x_data = torch.FloatTensor(x_data)\n","        self.y_data = torch.LongTensor(y_data)\n","        self.len = self.y_data.shape[0]\n","\n","    def __getitem__(self, index):\n","        return self.x_data[index], self.y_data[index] \n","\n","    def __len__(self):\n","        return self.len"],"execution_count":62,"outputs":[]},{"cell_type":"code","metadata":{"id":"vuYJFKFIJW_w","executionInfo":{"status":"ok","timestamp":1616560475632,"user_tz":-540,"elapsed":567,"user":{"displayName":"stp L","photoUrl":"","userId":"16125751050798431485"}}},"source":["# 전체 데이터를 학습 데이터와 평가 데이터로 나눈다.\n","X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2)\n","\n","# 학습 데이터, 시험 데이터 배치 형태로 구축하기\n","trainsets = TensorData(X_train, Y_train)\n","trainloader = torch.utils.data.DataLoader(trainsets, batch_size=16, shuffle=True)\n","\n","testsets = TensorData(X_test, Y_test)\n","testloader = torch.utils.data.DataLoader(testsets, batch_size=16, shuffle=False)"],"execution_count":63,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"yJCf1CQmax4P"},"source":["## 3. 모델 정의하기\n","\n","- Classifier를 만든다. InputLayer의 input_dim과 feature 수를 확인한다\n","- 마지막 출력층에 softmax를 하는 것에 주의한다 "]},{"cell_type":"code","metadata":{"id":"ho9a-5tfViu6","executionInfo":{"status":"ok","timestamp":1616560487016,"user_tz":-540,"elapsed":614,"user":{"displayName":"stp L","photoUrl":"","userId":"16125751050798431485"}}},"source":["class SimpleClassifier(nn.Module):\n","    def __init__(self):\n","        super(SimpleClassifier, self).__init__()\n","        self.fc1 = nn.Linear(4, 100)\n","        self.fc2 = nn.Linear(100, 100)\n","        self.fc3 = nn.Linear(100, 3)\n","        self.softmax = nn.Softmax(dim=1)\n","\n","    def forward(self, X):\n","        X = F.relu(self.fc1(X))\n","        X = self.fc2(X)\n","        X = self.fc3(X)\n","        X = self.softmax(X)\n","\n","        return X"],"execution_count":64,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"IZakyMTua-Yl"},"source":["- classification 문제의 경우, CrossEntropyLoss를 사용한다는 것에 유의!"]},{"cell_type":"code","metadata":{"id":"ymEpWZ2SVsn5","executionInfo":{"status":"ok","timestamp":1616560490058,"user_tz":-540,"elapsed":576,"user":{"displayName":"stp L","photoUrl":"","userId":"16125751050798431485"}}},"source":["model = SimpleClassifier()\n","criterion = nn.CrossEntropyLoss() # cross entropy loss\n","optimizer = optim.Adam(model.parameters(), lr=0.001, weight_decay=1e-7)"],"execution_count":65,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"85Wc85g0bEUd"},"source":["## 4. 모델 학습하기\n","\n","- epoch 설정, batch에서 데이터와 label 뽑아서 model에 prediction하고, 손실함수 역전파 가중치 업데이트가 되는 과정을 확인한다"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8QwoLCRhJ6UT","executionInfo":{"status":"ok","timestamp":1616561086132,"user_tz":-540,"elapsed":633,"user":{"displayName":"stp L","photoUrl":"","userId":"16125751050798431485"}},"outputId":"f6cb908c-478a-4050-eed7-9dac4b945274"},"source":["test = torch.argmax(outputs)\n","test"],"execution_count":85,"outputs":[{"output_type":"execute_result","data":{"text/plain":["tensor(34)"]},"metadata":{"tags":[]},"execution_count":85}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gTiI5UfVieaL","executionInfo":{"status":"ok","timestamp":1616560911814,"user_tz":-540,"elapsed":631,"user":{"displayName":"stp L","photoUrl":"","userId":"16125751050798431485"}},"outputId":"0920b586-7376-42f3-8ad7-cbb3633e4c1b"},"source":["outputs"],"execution_count":79,"outputs":[{"output_type":"execute_result","data":{"text/plain":["tensor([[0.2802, 0.3731, 0.3467],\n","        [0.2823, 0.3734, 0.3442],\n","        [0.2831, 0.3831, 0.3338],\n","        [0.2796, 0.3735, 0.3468],\n","        [0.2856, 0.3802, 0.3342],\n","        [0.2849, 0.3815, 0.3336],\n","        [0.2850, 0.3823, 0.3327],\n","        [0.2788, 0.3719, 0.3493],\n","        [0.2854, 0.3807, 0.3339],\n","        [0.2853, 0.3801, 0.3346],\n","        [0.2851, 0.3808, 0.3342],\n","        [0.2808, 0.3833, 0.3359],\n","        [0.2850, 0.3760, 0.3391],\n","        [0.2840, 0.3810, 0.3350],\n","        [0.2856, 0.3805, 0.3340],\n","        [0.2776, 0.3705, 0.3519]], grad_fn=<SoftmaxBackward>)"]},"metadata":{"tags":[]},"execution_count":79}]},{"cell_type":"code","metadata":{"id":"HWrxC60iWOGP","colab":{"base_uri":"https://localhost:8080/","height":385},"executionInfo":{"status":"error","timestamp":1616560494002,"user_tz":-540,"elapsed":625,"user":{"displayName":"stp L","photoUrl":"","userId":"16125751050798431485"}},"outputId":"aaa20dce-5281-4e24-ceb9-288419a61bbd"},"source":["loss_ = []\n","num_epoch = 100\n","n = len(trainloader)\n","\n","for epoch in range(num_epoch):\n","    running_loss = 0.0\n","    for i, data in enumerate(trainloader, 0): # 무작위로 섞인 16개 데이터가 있는 배치가 하나 씩 들어온다.\n","\n","        inputs, values = data # data에는 X, Y가 들어있다.\n","\n","        optimizer.zero_grad() # 최적화 초기화\n","        \n","        outputs = model(inputs) # 모델에 입력값 대입 후 예측값 산출\n","        loss = criterion(outputs, values) # 손실 함수 계산\n","        loss.backward() # 손실 함수 기준으로 역전파 설정 \n","        optimizer.step() # 역전파를 진행하고 가중치 업데이트\n","        \n","        running_loss += loss.item() # epoch 마다 평균 loss를 계산하기 위해 배치 loss를 더한다.\n"," \n","\n","    loss_.append(running_loss/n) # MSE(Mean Squared Error) 계산\n","\n","        \n","print('Finished Training')"],"execution_count":66,"outputs":[{"output_type":"error","ename":"RuntimeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mRuntimeError\u001b[0m                              Traceback (most recent call last)","\u001b[0;32m<ipython-input-66-a8642f599cf8>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     12\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     13\u001b[0m         \u001b[0moutputs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minputs\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;31m# 모델에 입력값 대입 후 예측값 산출\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 14\u001b[0;31m         \u001b[0mloss\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcriterion\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0moutputs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalues\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;31m# 손실 함수 계산\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     15\u001b[0m         \u001b[0mloss\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbackward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;31m# 손실 함수 기준으로 역전파 설정\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     16\u001b[0m         \u001b[0moptimizer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstep\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;31m# 역전파를 진행하고 가중치 업데이트\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/torch/nn/modules/module.py\u001b[0m in \u001b[0;36m_call_impl\u001b[0;34m(self, *input, **kwargs)\u001b[0m\n\u001b[1;32m    887\u001b[0m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_slow_forward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    888\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 889\u001b[0;31m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mforward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    890\u001b[0m         for hook in itertools.chain(\n\u001b[1;32m    891\u001b[0m                 \u001b[0m_global_forward_hooks\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/torch/nn/modules/loss.py\u001b[0m in \u001b[0;36mforward\u001b[0;34m(self, input, target)\u001b[0m\n\u001b[1;32m   1046\u001b[0m         \u001b[0;32massert\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mweight\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mweight\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mTensor\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1047\u001b[0m         return F.cross_entropy(input, target, weight=self.weight,\n\u001b[0;32m-> 1048\u001b[0;31m                                ignore_index=self.ignore_index, reduction=self.reduction)\n\u001b[0m\u001b[1;32m   1049\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1050\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/torch/nn/functional.py\u001b[0m in \u001b[0;36mcross_entropy\u001b[0;34m(input, target, weight, size_average, ignore_index, reduce, reduction)\u001b[0m\n\u001b[1;32m   2688\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0msize_average\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0mreduce\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2689\u001b[0m         \u001b[0mreduction\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_Reduction\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlegacy_get_string\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msize_average\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mreduce\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2690\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mnll_loss\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlog_softmax\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtarget\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mweight\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mignore_index\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mreduction\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2691\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2692\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/torch/nn/functional.py\u001b[0m in \u001b[0;36mnll_loss\u001b[0;34m(input, target, weight, size_average, ignore_index, reduce, reduction)\u001b[0m\n\u001b[1;32m   2383\u001b[0m         )\n\u001b[1;32m   2384\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mdim\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m2\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2385\u001b[0;31m         \u001b[0mret\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_C\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_nn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnll_loss\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtarget\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mweight\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0m_Reduction\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_enum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mreduction\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mignore_index\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2386\u001b[0m     \u001b[0;32melif\u001b[0m \u001b[0mdim\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m4\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2387\u001b[0m         \u001b[0mret\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_C\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_nn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnll_loss2d\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtarget\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mweight\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0m_Reduction\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_enum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mreduction\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mignore_index\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mRuntimeError\u001b[0m: 1D target tensor expected, multi-target not supported"]}]},{"cell_type":"markdown","metadata":{"id":"YgVPZDF4bSdI"},"source":["## 5. 모델 평가\n","\n","- 모델 학습이 끝나면 아래 코드를 참고하여 분류 성능을 확인할 수 있다"]},{"cell_type":"code","metadata":{"id":"TGl8XgyEYDDD"},"source":["correct = 0\n","with torch.no_grad():\n","  for i, data in enumerate(testsets):\n","    label = data[1].numpy()\n","    predicted = model.forward(data[0].reshape(1,-1))\n","    predicted_label = predicted.argmax().item()\n","    \n","    if label == predicted_label:\n","      correct += 1\n","\n","print(correct)\n","print(correct / len(testsets))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"YTchqI26Ya7k"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"anKBK_5OJUGy"},"source":[""],"execution_count":null,"outputs":[]}]}